{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Elija\\\\E_Store\\\\MyStore\\\\MyStore\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { Customer } from '../models/customer.model';\nimport { BehaviorSubject } from 'rxjs';\nimport { CartProduct } from '../models/cart_product.model';\nimport { Product } from '../models/product.model';\nimport * as i0 from \"@angular/core\";\nexport class DatashareService {\n  constructor() {\n    //MUST BE CLASSES NOT IMPORTS!!!\n    this.customerData = new BehaviorSubject(new Customer());\n    this.logginData = new BehaviorSubject(false); //private cartData: BehaviorSubject<Array<CartProduct>> = new BehaviorSubject([]);\n\n    this.cartData = new BehaviorSubject([new CartProduct()]);\n    this.totalItems = new BehaviorSubject(0); //private cartData = new BehaviorSubject<CartProduct[]>([])\n\n    this.products = new BehaviorSubject([new Product()]); //{productId: 0, name: '', price: 0, info : '', category : '', picture : '', quantity: 0}\n\n    this.count1 = 0; //count2 = 0;\n    //item = {cartProductId: 0, productId: 0, customerId: 0, quantity: 0}\n\n    this.currentCustomerData = this.customerData.asObservable();\n    this.currentLogginData = this.logginData.asObservable();\n    this.currentCartData = this.cartData.asObservable();\n    this.currentTotalItems = this.totalItems.asObservable();\n  }\n\n  ngOnInit() {\n    this.getTotal();\n  }\n\n  setCustomerData(data) {\n    this.customerData.next(data);\n  }\n\n  getCustomerData() {\n    return this.customerData;\n  }\n\n  setLoginData(data) {\n    this.logginData.next(data);\n  }\n\n  getLoginData() {\n    return this.customerData;\n  }\n\n  setCartData(data) {\n    this.cartData.next(data);\n  }\n\n  getCartData() {\n    return this.cartData;\n  }\n\n  setTotalItems(data) {\n    this.totalItems.next(data);\n  }\n\n  getTotalItems() {\n    return this.totalItems;\n  }\n\n  addCount(value) {\n    this.count1 += value;\n    this.totalItems.next(this.count1);\n  }\n\n  decCount(value) {\n    this.count1 -= value;\n    this.totalItems.next(this.count1);\n  }\n\n  getTotal() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.currentCartData.subscribe(data => {\n        let sum = 0;\n        data.forEach(obj => {\n          sum += obj.quantity;\n        });\n        _this.count1 = sum;\n\n        _this.setTotalItems(sum);\n      });\n    })();\n  }\n\n}\n\nDatashareService.ɵfac = function DatashareService_Factory(t) {\n  return new (t || DatashareService)();\n};\n\nDatashareService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DatashareService,\n  factory: DatashareService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/Elija/E_Store/MyStore/MyStore/ClientApp/src/app/services/datashare.service.ts"],"names":["Customer","BehaviorSubject","CartProduct","Product","i0","DatashareService","constructor","customerData","logginData","cartData","totalItems","products","count1","currentCustomerData","asObservable","currentLogginData","currentCartData","currentTotalItems","ngOnInit","getTotal","setCustomerData","data","next","getCustomerData","setLoginData","getLoginData","setCartData","getCartData","setTotalItems","getTotalItems","addCount","value","decCount","subscribe","sum","forEach","obj","quantity","ɵfac","DatashareService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { Customer } from '../models/customer.model';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { CartProduct } from '../models/cart_product.model';\r\nimport { Product } from '../models/product.model';\r\nimport * as i0 from \"@angular/core\";\r\nexport class DatashareService {\r\n    constructor() {\r\n        //MUST BE CLASSES NOT IMPORTS!!!\r\n        this.customerData = new BehaviorSubject(new Customer);\r\n        this.logginData = new BehaviorSubject(false);\r\n        //private cartData: BehaviorSubject<Array<CartProduct>> = new BehaviorSubject([]);\r\n        this.cartData = new BehaviorSubject([new CartProduct]);\r\n        this.totalItems = new BehaviorSubject(0);\r\n        //private cartData = new BehaviorSubject<CartProduct[]>([])\r\n        this.products = new BehaviorSubject([new Product]);\r\n        //{productId: 0, name: '', price: 0, info : '', category : '', picture : '', quantity: 0}\r\n        this.count1 = 0;\r\n        //count2 = 0;\r\n        //item = {cartProductId: 0, productId: 0, customerId: 0, quantity: 0}\r\n        this.currentCustomerData = this.customerData.asObservable();\r\n        this.currentLogginData = this.logginData.asObservable();\r\n        this.currentCartData = this.cartData.asObservable();\r\n        this.currentTotalItems = this.totalItems.asObservable();\r\n    }\r\n    ngOnInit() {\r\n        this.getTotal();\r\n    }\r\n    setCustomerData(data) {\r\n        this.customerData.next(data);\r\n    }\r\n    getCustomerData() {\r\n        return this.customerData;\r\n    }\r\n    setLoginData(data) {\r\n        this.logginData.next(data);\r\n    }\r\n    getLoginData() {\r\n        return this.customerData;\r\n    }\r\n    setCartData(data) {\r\n        this.cartData.next(data);\r\n    }\r\n    getCartData() {\r\n        return this.cartData;\r\n    }\r\n    setTotalItems(data) {\r\n        this.totalItems.next(data);\r\n    }\r\n    getTotalItems() {\r\n        return this.totalItems;\r\n    }\r\n    addCount(value) {\r\n        this.count1 += value;\r\n        this.totalItems.next(this.count1);\r\n    }\r\n    decCount(value) {\r\n        this.count1 -= value;\r\n        this.totalItems.next(this.count1);\r\n    }\r\n    async getTotal() {\r\n        await this.currentCartData.subscribe(data => {\r\n            let sum = 0;\r\n            data.forEach((obj) => {\r\n                sum += obj.quantity;\r\n            });\r\n            this.count1 = sum;\r\n            this.setTotalItems(sum);\r\n        });\r\n    }\r\n}\r\nDatashareService.ɵfac = function DatashareService_Factory(t) { return new (t || DatashareService)(); };\r\nDatashareService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DatashareService, factory: DatashareService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}